
/**
 * This ArrayStringLog object represents a StringLog ADT implemented as
 * a String array using the EnhancedStringLogInterface.
 * 
 * @author  
 * @version 
 */
public class ArrayStringLog<T>
{
    // Instance variables
    private T[] log;
    private String name;
    private int size;
    
    // Create a new String array with a capacity of 4 elements
    // and assign values to instance variables.
    public ArrayStringLog(String name)
    {
        this.name = name;
        size = 0;
        
        log =  (T[]) new Object[4];
    }

    // Returns the name of this StringLog.
    public String getName()
    {
        return name;
    }

    // Returns the logical size of this StringLog.
    public int size()
    {
        return size;
    }
    
    // Returns true if this list contains no elements.
    public boolean isEmpty()
    {
        return size == 0;
    }
    // Returns true if this list is completely full.
    public boolean isFull()
    {
        return size == log.length;
    }

    // Appends the specified element to the end of this list.
    public void add(T element)
    {
        T[] log2 = (T[])new Object[log.length*2];
        if(!isFull()){
            log[size++] = element;
        }
        else{
           for(int i = 0; i < size; i++){
               log2[i] = log[i];
           }
           log2[size] = element;
           size++;
           log = log2;
        }
    }
  
    // Returns the element at the specified position in this list.
    public T get(int index)
    {
        return log[index];
    }
    
    // Returns the index of the first occurance of the specified element
    // in this list, or -1 if this list does not contain the element.
    public int indexOf(T element)
    {
        int index = -1;
        for(int i = 0; i < log.length; i++){
            if(log[i] != null && log[i].equals(element)){
                index = i;
            }
        }
        return index;
    }
    
    // Returns true if this list contains the specified element.
    public boolean contains(String element)
    {
        for(int i = 0; i < log.length; i++){
            if(log[i].equals(element)){
                return true;
            }
        }
        return false;
    }
    
    // Returns a formatted string representation of this StringLog.
    public String toString()
    {
        String result = "Log: " + name + "\n";
        for (int i = 0; i < size; i++)
        {
            result += (i + 1) + ". " + log[i] + "\n";
        }
        return result;
    }
    
    // Replaces the element at the specified position in this list
    // with the specified element.  Returns what was at that location
    public T set(int index, T element)
    {
        T temp = log[index];
        log[index] = element;
        return temp;
    }
    
    // Inserts the specified element at the specified position in this list.
    public void add(int index, T element)
    {
        
        if(isFull()){
            T[] log2 =  (T[]) new Object[log.length*2];
            for(int i = 0; i < index; i++){
                log2[i] = log[i];
            }
            log2[index] = element;
            size++;
            for(int i = index; i < size; i++){
                log2[i+1] = log[i];
            }
            log = log2;
        }
        else{
            T[] log2 = (T[]) new Object[log.length];
            for(int i = 0; i < index; i++){
                log2[i] = log[i];
            }
            log2[index] = element;
            size++;
            for(int i = index; i < size; i++){
                log2[i+1] = log[i];
            }
            log = log2;
        }
    }
    
    // Removes the element at the specified position in this list, and
    // returns the element that was removed.  Any unused array elements
    // are set to null.
    public T remove(int index)
    {
        T removedElement = log[index];
        for (int i = index; i < size - 1; i++) {
            log[i] = log[i + 1];
        }
        log[size - 1] = null;
        size--;
        return removedElement;
    }
    
    // Removes the first occurance of the specified element from this
    // list, if it is present.  Returns true if element was found (and 
    // removed), false otherwise.
    public boolean remove(T element)
    {
        int index = indexOf(element);
        if (index != -1) {
            remove(index);
            return true;
        }
        return false;
    }
    
    // Removes all of the elements from this list.
    public void clear()
    {
        log = (T[])new Object[4];
        size = 0;
    }
}
